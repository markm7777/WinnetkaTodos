{"version":3,"sources":["Todo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","useState","task","setTask","todoList","setTodoListItems","completedList","setCompletedItems","id","style","color","value","onChange","e","currentTarget","onClick","map","item","i","key","temp","handleMoveup","length","handleMoveDown","newList","filter","handleCompleted","handleDeletePending","className","handleUndo","handleDeleteCompleted","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.76d2cf50.chunk.js","sourcesContent":["import React from 'react';\r\nimport './App.css';\r\nimport {useState} from 'react';\r\n\r\nfunction Todo() {\r\n  const [task, setTask] = useState('');\r\n  const [todoList, setTodoListItems] = useState([]);\r\n  const [completedList, setCompletedItems] = useState([]);  \r\n\r\n  const handleInput = (e) => {\r\n    setTask(e.currentTarget.value);\r\n  } \r\n\r\n  const handleAdd = () => {\r\n    setTodoListItems([...todoList,task])\r\n    setTask('');\r\n  }\r\n\r\n  const handleDeletePending = (id) => {\r\n    const newList = todoList.filter((item, i) => i !== id);\r\n    setTodoListItems(newList);\r\n  }\r\n\r\n  const handleDeleteCompleted = (id) => {\r\n    const newList = completedList.filter((item, i) => i !== id);\r\n    setCompletedItems(newList);\r\n  }\r\n\r\n  const handleCompleted = (id) => {\r\n    setCompletedItems([...completedList,todoList[id]])\r\n    const newList = todoList.filter((item, i) => i !== id);\r\n    setTodoListItems(newList);\r\n  }\r\n\r\n  const handleUndo = (id) => {\r\n    setTodoListItems([...todoList,completedList[id]])\r\n    const newList = completedList.filter((item, i) => i !== id);\r\n    setCompletedItems(newList);\r\n  }\r\n\r\n  const handleMoveup = (id) => {\r\n    if (id !== 0) {  \r\n      let temp = todoList[id];\r\n      todoList[id] = todoList[id - 1]; \r\n      todoList[id - 1] = temp;\r\n      setTodoListItems([...todoList])\r\n    }\r\n  }\r\n\r\n  const handleMoveDown = (id) => {\r\n    if (id !== todoList.length - 1) {\r\n      let temp = todoList[id];\r\n      todoList[id] = todoList[id + 1]; \r\n      todoList[id + 1] = temp;\r\n      setTodoListItems([...todoList])\r\n    }\r\n  }\r\n\r\n  const handleClearAllTodos = () => {\r\n    setTodoListItems([]);\r\n  }\r\n\r\n  const handleClearAllCompleted = () => {\r\n    setCompletedItems([]);\r\n  }\r\n\r\n  return (\r\n    <div id='mainDiv'>\r\n      <div id='header'>\r\n        <div id='titleDiv'>\r\n          <p>Things \r\n          <span style={{color: '#00ff00'}}> 'Todo' </span> \r\n            in Winnetka!</p>\r\n        </div>\r\n        <div id='addDiv'> \r\n          <input id='addInput' value={task} onChange={handleInput}></input>\r\n          <button id='addButton' onClick={handleAdd}>Add</button>\r\n        </div>\r\n      </div> \r\n      <div id='mainContent'>\r\n\r\n        <div id='listDiv'> \r\n          <div id='todoList'>\r\n            <div id='todoListTitle'>Pending Tasks</div>\r\n            <ul>\r\n              {todoList.map((item, i) => {\r\n                return (\r\n                  <div id='liDiv' key={i}>\r\n                    <div id='liDivButtons'>\r\n                      <button id='upButton' onClick={() => handleMoveup(i)}>&#9650;</button>\r\n                      <button id='downButton' onClick={() => handleMoveDown(i)}>&#9660;</button>\r\n                    </div>  \r\n                    <div id='liDivTask'>\r\n                      <li>{item}</li>\r\n                    </div>\r\n                    <div id='liDivButtons'>\r\n                      <button id='doneButton' onClick={() => handleCompleted(i)}>Done</button>\r\n                      <button id='deleteButton' onClick={() => handleDeletePending(i)}>X</button>\r\n                    </div>  \r\n                  </div>)}\r\n                )\r\n              }\r\n            </ul>\r\n            <p className='taskCount'>{todoList.length} Task(s)</p>\r\n          </div>\r\n          <div id='doneList'>\r\n            <div id='todoListTitle'>Completed Tasks</div>\r\n            <ul>\r\n              {completedList.map((item, i) => {\r\n                return (\r\n                  <div id='liDiv' key={i}>\r\n                    <div id='liDivTask'>\r\n                      <li>{item}</li>\r\n                    </div>\r\n                    <div id='liDivButtons'>\r\n                      <button id='doneButton' onClick={() => handleUndo(i)}>Undo</button>\r\n                      <button id='deleteButton' onClick={() => handleDeleteCompleted(i)}>X</button>\r\n                    </div>  \r\n                  </div>)}\r\n                )\r\n              }\r\n            </ul>\r\n            <p className='taskCount'>{completedList.length} Task(s)</p>\r\n          </div>\r\n        </div>\r\n      </div> \r\n      <div id='footer'>\r\n        <div id='footerButtons'>\r\n          <button className='clearButton' onClick={handleClearAllTodos}>Clear All</button>\r\n          <p id='copyright'>Winnetka Webworks, Inc. &#169; 2020</p>\r\n          <button className='clearButton' onClick={handleClearAllCompleted}>Clear All</button>\r\n        </div>\r\n      </div> \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Todo;\r\n","import React from 'react';\nimport './App.css';\nimport Todo from './Todo.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo></Todo>  \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}